version: '3.8'

services:
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis-cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq_user
      RABBITMQ_DEFAULT_PASS: rabbitmq_password
    ports:
      - "5672:5672" # Porta para comunicação (AMQP)
      - "15672:15672" # Porta para acessar o painel de administração
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  cart-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cart-service
    restart: always
    ports:
      - "8080:8080" # Porta exposta pelo serviço
    depends_on:
      - postgres-db
      - redis
      - rabbitmq
    networks:
      - app-network

volumes:
  db-data:
  redis-data:
  rabbitmq-data:

networks:
  app-network:
